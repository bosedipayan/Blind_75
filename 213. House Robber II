class Solution {
public:
    /*int checkval(int n,vector<int>&res,vector<int> &dp)
    {
        if(n==0) return res[n];
        if(n<0) return 0;
        
        if(dp[n]!=-1) return dp[n];
        
        int take=res[n]+checkval(n-2,res,dp);
        int notTake=0+checkval(n-1,res,dp);
        
        return dp[n]=max(take,notTake);
    }*/
    int checkSum(vector<int> &res)
    {   
        int n=res.size();
        //vector<int> dp(n+1,0);
        //return checkval(n-1,res,dp);
        int curr=res[0];
        int prev=0;
        
        for(int i=1;i<n;i++)
        {
            int take=res[i];
            
            if(i>1)
            {
                take+=prev;
            }
            
            int notTake=0+curr;
            int ans=max(take,notTake);
            prev=curr;
            curr=ans;
        }
        return curr;
    }
    int rob(vector<int>& nums) {
        if (nums.size() == 0) return 0;
        if (nums.size() == 1) return nums[0];
        if (nums.size() == 2) return max(nums[0], nums[1]);
        
        vector<int> temp1,temp2;
        int n=nums.size();
        
        for(int i=0;i<n;i++)
        {
            if(i!=0) temp1.push_back(nums[i]);
            if(i!=n-1) temp2.push_back(nums[i]);
        }
        
        return max(checkSum(temp1),checkSum(temp2));
    }
};
