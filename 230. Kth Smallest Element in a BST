/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /*int checkSmallest(TreeNode* root, int &c, int k)
    {
        if(root==NULL)
        {
            return -1;
        }
        
        int left = checkSmallest(root->left,c,k);
        
        if(left!=-1)
        {
            return left;
        }
        c++;
        
        if(c==k)
        {
            return root->val;
        }
        
        return checkSmallest(root->right,c,k);
    }*/
    priority_queue<int> pq;
    void smallBST(TreeNode* root,int k)
    {
        if(root==NULL)
        {
            return;
        }
        
        if(root) pq.push(root->val);
        if(pq.size() > k)
        {
            pq.pop();
        }
        
        smallBST(root->left,k);
        smallBST(root->right,k);
    }
    
    int kthSmallest(TreeNode* root, int k) {
        /*int c=0;
        return checkSmallest(root,c,k);*/
        
        smallBST(root,k);
        return pq.top();
    }
};
